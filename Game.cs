using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace Tank_Game
{
	/// <summary>
	/// The Game Class creates a new Form that displays
	/// all the controls and Movements for the gane inside it, Shoot Em.
	/// It holds all its players values and controls needed in the form,
	/// Including the generated Maze background.
	/// </summary>
	public partial class Game : Form
	{
		//########################################################
		#region Instance Variables

		//random variable to pass to classes so the number generated is not the same.
		private readonly Random _random = new Random();
		/// <summary>
		/// the maze needed for each player to move around / play in.
		/// </summary>
		private Maze _maze;
		/// <summary>
		/// The Left PLayers Tank, With W,A,S,D and Q Controls
		/// </summary>
		private Tank _leftPlayer;
		/// <summary>
		/// The Right PLayer Tanks, With I,J,K,L AND P Controls
		/// </summary>
		private Tank _rightPlayer;
		/// <summary>
		/// List of bullets that the left player has shot.
		/// </summary>
		private List<Bullet> _leftPlayerBullets = new List<Bullet>(10);
		/// <summary>
		/// list of bullets that the right player has shot.
		/// </summary>
		private List<Bullet> _rightPlayerBullets = new List<Bullet>(10);
		/// <summary>
		/// Pauses the game as a check in methods when a player wants to pause.
		/// </summary>
		private bool _paused = false;
		/// <summary>
		/// Counts down the round to zero once either player dies
		/// </summary>
		private int _roundCountdown = 8;
		#endregion
		//########################################################
		#region Constructor


		/// <summary>
		/// Constructor for the gamne, initializes the maze and the players.
		/// </summary>
		/// <param name="player1Image">the colour image the left player has decided to use.</param>
		/// <param name="player2Image">the colour image the right player has decided to use.</param>
		public Game(Image player1Image, Image player2Image)
		{
			InitializeComponent();
			_maze = new Maze(pictureBoxGame);
			_leftPlayer = new LeftPlayer(_maze, player1Image);
			_rightPlayer = new PlayerTwo(_maze, player2Image);
			//Give the players the enemy location, only so that they can't drive over
			//each other or spawn on top of each other.
			_leftPlayer.SetEnemy = _rightPlayer;
			_rightPlayer.SetEnemy = _leftPlayer;
			Reset();
		}
		#endregion
		//########################################################
		#region Private Event Methods


		/// <summary>
		/// Called each time the picturebox refreshes, displays the maze and all sprites.
		/// </summary>
		private void PictureBoxGame_Paint(object sender, PaintEventArgs e)
		{
			_maze.Display(e.Graphics);
			//display all sprites
			_leftPlayer.Draw(e.Graphics);
			_rightPlayer.Draw(e.Graphics);
			/// draw all bullets generated by players
			DrawBullets(_leftPlayerBullets, e.Graphics);
			DrawBullets(_rightPlayerBullets, e.Graphics);
		}

		/// <summary>
		/// Draws each bullet in the given list onto the paper.
		/// </summary>
		/// <param name="bullets">The list of bullets to be drawn.</param>
		/// <param name="paper"></param>
		private void DrawBullets(List<Bullet> bullets, Graphics paper)
		{
			foreach (Bullet bullet in bullets)
			{
				bullet.Draw(paper);
			}
		}
		/// <summary>
		/// Pass keyboard movements to anything controlled
		/// </summary>
		private void GameDisplay_KeyDown(object sender, KeyEventArgs e)
		{
			_leftPlayer.StartMovement(e);
			_rightPlayer.StartMovement(e);
		}

		/// Cancel any keyboard movements changing values
		private void GameDisplay_KeyUp(object sender, KeyEventArgs e)
		{
			_leftPlayer.StopMovement(e);
			_rightPlayer.StopMovement(e);
		}
		/// <summary>
		/// Is called every 30 Milliseconds, Updates the game players,
		/// their respective bullets,
		/// and checks if anyone his / initiates finishing the round.
		/// </summary>
		private void Timer1_Tick(object sender, EventArgs e)
		{
			/// If not paused,
			if (!_paused)
			{  //move each player 
				_leftPlayer.Move();
				_rightPlayer.Move();
				//manages the bullets of each player.
				UpdateBullets(_leftPlayer, _leftPlayerBullets);
				UpdateBullets(_rightPlayer, _rightPlayerBullets);
				//if ANY player is Hit with ANY bullet, reduce roundCountdown time.
				if (_leftPlayer.IsHit(_leftPlayerBullets) || _leftPlayer.IsHit(_rightPlayerBullets) ||
					_rightPlayer.IsHit(_leftPlayerBullets) || _rightPlayer.IsHit(_rightPlayerBullets))
				{ //reduce the time until the round finishes.
					--_roundCountdown;
				}
				//if round has finished
				if (_roundCountdown == 0)
				{
					FinishRound();
				}
				//Refresh the display.
				pictureBoxGame.Refresh();
			}
		}


		/// <summary>
		/// Shows Who has won, updates tally and resets.
		/// NO tallys are updated if both tanks are shot within the same span.
		/// </summary>
		private void FinishRound()
		{
			//if player1 / left player has won
			if (_rightPlayer.IsDead && _leftPlayer.IsDead == false)
			{
				MessageBox.Show("Player 1 Won!");
				_leftPlayer.RoundsWon += 1;
			}//if player 2 / right has won
			else if (_leftPlayer.IsDead && _rightPlayer.IsDead == false)
			{
				MessageBox.Show("Player 2 Won!");
				_rightPlayer.RoundsWon += 1;
			}
			Reset();
		}
		/// <summary>
		/// Resets the Maze and the players to new positions, checks the tallys are correct
		/// </summary>
		private void Reset()
		{
			///reset the rountcountdown
			_roundCountdown = 8;
			/// Update Players tallys.
			_labelLeftPlayerScore.Text = $"Left Player Score: {_leftPlayer.RoundsWon}";
			_labelRightPlayerTally.Text = $"Right Player Score: {_rightPlayer.RoundsWon}";
			//Clear and reset tanks , bullets and generate new maze.
			_rightPlayerBullets.Clear();
			_leftPlayerBullets.Clear();
			// Regenerate the maze
			_maze.Reset(pictureBoxGame);
			//set tanks to a new position
			_leftPlayer.NewPosition(_random);
			_rightPlayer.NewPosition(_random);
			//incase someone wanted to pause.
			_paused = false;
		}
		/// <summary>
		/// Resets the maze if players dont like this generated one.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void ButtonResetMaze_Click(object sender, EventArgs e)
		{
			Reset();
		}
		//forces the round to be reset since the size has changed.
		private void GameDisplay_SizeChanged(object sender, EventArgs e)
		{
			Reset();
		}
		/// <summary>
		/// Pauses all sprites in the current game and gives a grey background
		/// </summary>
		private void ButtonPause_Click(object sender, EventArgs e)
		{
			//Pause or Unpause - reverse the value.
			_paused = !_paused;
			if (_paused)
			{
				Graphics paper = pictureBoxGame.CreateGraphics();
				//display the background as shaded so uses can see it is paused.
				paper.FillRectangle(new SolidBrush(Color.FromArgb(170, 0, 0, 0)), 0, 0, pictureBoxGame.Width, pictureBoxGame.Height);
			}

		}
		/// <summary>
		/// Updates the bullets list with any new or finished bullets from the tank.
		/// </summary>
		/// <param name="player">The tank to check whether it wants to create a new bullet or not.</param>
		/// <param name="playerBullets">The tanks list of bullets to update.</param>
		private void UpdateBullets(Tank player, List<Bullet> playerBullets)
		{
			// reduce the time till each player can shoot again.
			player.BulletCoolDown--;
			//if the player has had a sufficient time since last shot (4 ticks).
			if (player.BulletCoolDown <= 0)
			{
				Bullet bullet = player.Shoot();
				if (bullet != null)
				{   //add bullet to list to keep track of and draw.
					playerBullets.Add(bullet);
					player.BulletCount++;
					//since shooting has been successful, reset cooldown to 4.
					player.BulletCoolDown = 4;
				}
			}
			//Goes thorugh the list and removes any bullets that have expired.
			for (int i = playerBullets.Count - 1; i >= 0; i--)
			{
				/// Move each Bullet..
				playerBullets[i].Move();
				//if any bullet is finished, dispose of it.
				if (playerBullets[i].Finished)
				{
					playerBullets.RemoveAt(i);
					//reduce the bullet count because 1 has been removed.
					player.BulletCount--;
				}

			}

		}

		#endregion
	}
}
